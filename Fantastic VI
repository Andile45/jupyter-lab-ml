#prediction 4
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder

# Binary target for Graduation (1 = Graduate, 0 = Not Graduate based on Exam Score >= 60)
data3['Graduation_Status'] = data3['Exam_Score'].apply(lambda x: 1 if x >= 60 else 0)

# Encode categorical variables
label_encoder = LabelEncoder()
data3['Extracurricular_Activities'] = label_encoder.fit_transform(data3['Extracurricular_Activities'])
data3['Motivation_Level'] = label_encoder.fit_transform(data3['Motivation_Level'])

# Select relevant predictors
X = data3[['studID', 'Hours_Studied', 'Attendance', 'Motivation_Level', 'Extracurricular_Activities']]
y = data3['Graduation_Status']

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Build logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Predict graduation status on test data
y_pred = model.predict(X_test)

#Predictions 

#prediction 4
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder

# Binary target for Graduation (1 = Graduate, 0 = Not Graduate based on Exam Score >= 60)
data3['Graduation_Status'] = data3['Exam_Score'].apply(lambda x: 1 if x >= 60 else 0)

# Encode categorical variables
label_encoder = LabelEncoder()
data3['Extracurricular_Activities'] = label_encoder.fit_transform(data3['Extracurricular_Activities'])
data3['Motivation_Level'] = label_encoder.fit_transform(data3['Motivation_Level'])

# Select relevant predictors
X = data3[['studID', 'Hours_Studied', 'Attendance', 'Motivation_Level', 'Extracurricular_Activities']]
y = data3['Graduation_Status']

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Build logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Predict graduation status on test data
y_pred = model.predict(X_test)

# Model accuracy and classification report
accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)
print(f"Accuracy: {accuracy}")
print(f"Classification Report:\n{classification_rep}")
